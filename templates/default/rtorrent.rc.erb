### GENERAL SETTINGS
#

# Default directory to save the downloaded torrents.
directory = <%= @user_dir %>/torrents

# Default session directory.
# Make sure you don't run multiple instance of rtorrent using the same session directory.
session = <%= @user_dir %>/.session

# Check hash for finished torrents. Might be useful until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = <%= node[:rtorrent][:check_hash] %>

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = <%= node[:rtorrent][:encryption] %>

# Stop torrents when
# reaching upload ratio in percent,
# or reaching total upload in Mbytes,
# or reaching final upload ratio in percent.
<% if node[:rtorrent][:ratio] %>
ratio.enable =
ratio.min.set = <%= @ratio_min || node[:rtorrent][:ratio_min] %>
ratio.max.set = <%= @ratio_max || node[:rtorrent][:ratio_max] %>
ratio.upload.set = <%= @ratio_upload || node[:rtorrent][:ratio_upload] %>
<% end %>



### THROTTLE SETTINGS
#

# Global upload and download rate. "0" for unlimited.
upload_rate = <%= @upload_rate || node[:rtorrent][:upload_rate] %>
download_rate = <%= @download_rate || node[:rtorrent][:download_rate] %>

# Maximum and minimum number of peers to connect to per torrent.
min_peers = <%= @min_peers || node[:rtorrent][:min_peers] %>
max_peers = <%= @max_peers || node[:rtorrent][:max_peers] %>

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = <%= @min_peers_seed || node[:rtorrent][:min_peers_seed] %>
max_peers_seed = <%= @min_peers_seed || node[:rtorrent][:max_peers_seed] %>

# Maximum number of simultaneous uploads per torrent.
max_uploads = <%= @max_uploads || node[:rtorrent][:max_uploads] %>

# Max upload and download slots allowed
max_uploads_global = <%= @max_uploads_global || node[:rtorrent][:max_uploads_global] %>
max_downloads_global = <%= @max_downloads_global || node[:rtorrent][:max_downloads_global] %>



### TRACKER RELATED SETTINGS
#

# The ip address reported to the tracker.
ip = <%= @ipaddress || node[:ipaddress] %>

# The ip address the listening socket and outgoing connections is bound to.
#bind = 127.0.0.1
scgi_port = 127.0.0.1:50<%= @index %>

# Port range to use for listening.
port_range = 629<%= @index %>-629<%= @index %>

# Start opening ports at a random position within the port range.
port_random = <%= node[:rtorrent][:port_random] %>

peer_exchange = <%= node[:rtorrent][:peer_exchange] %>

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = <%= node[:rtorrent][:use_udp_trackers] %>

dht = <%= node[:rtorrent][:dht] %>



### ADVANCED SETTINGS
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
hash_read_ahead = <%= node[:rtorrent][:hash_read_ahead] %>

# Interval between attempts to check the hash, in milliseconds.
hash_interval = <%= node[:rtorrent][:hash_interval] %>

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
hash_max_tries = <%= node[:rtorrent][:hash_max_tries] %>

# Max number of files to keep open simultaneously.
max_open_files = <%= @max_open_files || node[:rtorrent][:max_open_files] %>

# Set the max amount of memory space used to mapping file chunks.
# This may also be set using ulimit -m where 3/4 will be allocated to file chunks.
max_memory_usage = <%= @max_memory || node[:rtorrent][:max_memory_usage] %>

# Adjust the send and receive buffer size for socket.
send_buffer_size = <%= @send_buffer_size || node[:rtorrent][:send_buffer_size] %>
receive_buffer_size = <%= @receive_buffer_size || node[:rtorrent][:receive_buffer_size] %>



### SCHEDULING
#

# Watch a directory for new torrents, and stop those that have been deleted.
schedule = watch_directory,5,60,load_start=<%= @user_dir %>/watch/*.torrent
#schedule = untied_directory,5,60,stop_untied=~/watch/*.torrent

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=1000M

# Alternative calls to bind and ip that should handle dynamic ip's.
# schedule = ip_tick,0,1800,ip=rakshasa
# schedule = bind_tick,0,1800,bind=rakshasa

# Example of scheduling commands: Switch between two ip's every 5
# seconds.
#schedule = "ip_tick1,5,10,ip=torretta"
#schedule = "ip_tick2,10,10,ip=lampedusa"

# Remove a scheduled event.
#schedule_remove = "ip_tick1"
